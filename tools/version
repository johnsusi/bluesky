#!/usr/bin/env ruby

version_file = File.expand_path('../../lib/bluesky/version.rb', __FILE__)
require_relative version_file

require 'fileutils'
require 'optparse'

def update_docs!
  `#{File.expand_path('../mkdocs', __FILE__)}`
end

def git_clean?
  `git status --porcelain`.split(/\n/).select { |line| !line.start_with? '??' }.empty?
end

options = {
  docs: false,
  force: false,
  message: 'Version %s',
  version: Bluesky::VERSION.split(".").map(&:to_i)
}

opt_parser = OptionParser.new do |opts|
  opts.banner = "Usage: version [major | minor | patch] [-m <commit-msg>]"

  opts.on("--docs", "Build documentation") do
    options[:docs] = true
  end

  opts.on("-f", "--force", "Skip checks") do
    options[:force] = true
  end

  opts.on("-m", "--message=<msg>", "Use the given <msg> as the commit message.") do |msg|
    options[:message] = msg
  end

  opts.on("-v", "--[no-]verbose", "Run verbosely") do |v|
    options[:verbose] = v
  end
end

opt_parser.parse!

case ARGV[0]
when "major"
  options[:version][0] += 1
  options[:version][1] = 0
  options[:version][2] = 0
when "minor"
  options[:version][1] += 1
  options[:version][2] = 0
when "patch"
  options[:version][2] += 1
else
  puts opt_parser
  exit
end

update_docs!

abort "Git working directory not clean" unless git_clean? || options[:force]

version = options[:version].join('.')

text = "module Bluesky\n  VERSION = \"#{version}\"\nend\n"

IO.write(version_file, text)

options[:message].gsub!('%s', version)

system("git commit #{version_file} -m \"Version #{version}\"")

system("git tag -a -d v#{version} -m \"#{options[:message]}\"")

system("git push && git push --tags")